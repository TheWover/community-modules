#!/usr/bin/env python3
from subprocess import PIPE, run, STDOUT
from tempfile import mkstemp
import base64

verbose = False
result = []

def vprint(status):
    global result
    result.append(status)
    if verbose:
        print(status)
        
def runOrchard():
    encoded = """"""
    try:
        args = ["osascript","-l","JavaScript","-e",base64.b64decode(encoded)]
        process = run(args,stdout=PIPE,stderr=STDOUT,text=True,errors="ignore")
        data = process.stdout
        if data == "":
            vprint("No Active Directory discovered")
        else:
            vprint(data)
    except Exception as e:
        vprint(f"Error: Exception Raised: {e}")
    
    
def main():
    global result
    result = []
    runOrchard()
    return result

if __name__ == "__main__":
    main()